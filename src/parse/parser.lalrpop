use {
    super::{
        ast::{self, ExpressionRef, FieldRef},
        Error,
        StringRef,
        Token,
    },
    crate::parse::lex::Numeral,
    cranelift_entity::{
        EntityList,
    },
};

grammar<'a>(builder: &'a ast::Builder<'a>);

pub ExpressionList: EntityList<ExpressionRef> = {
    <accum:ExpressionList> "," <expression:Expression> => builder.expression_list(accum, expression),
    <expression:Expression> => builder.expression_list(EntityList::new(), expression),
};

Expression: ExpressionRef = {
    <lhs:Expression> "or" <rhs:AndExpression> => builder.or(lhs, rhs),
    AndExpression,
};

AndExpression: ExpressionRef = {
    <lhs:AndExpression> "and" <rhs:ComparisonExpression> => builder.and(lhs, rhs),
    ComparisonExpression,
};

ComparisonExpression: ExpressionRef = {
    <lhs:ComparisonExpression> "<" <rhs:BorExpression> => builder.lt(lhs, rhs),
    <lhs:ComparisonExpression> ">" <rhs:BorExpression> => builder.gt(lhs, rhs),
    <lhs:ComparisonExpression> "<=" <rhs:BorExpression> => builder.le(lhs, rhs),
    <lhs:ComparisonExpression> ">=" <rhs:BorExpression> => builder.ge(lhs, rhs),
    <lhs:ComparisonExpression> "~=" <rhs:BorExpression> => builder.ne(lhs, rhs),
    <lhs:ComparisonExpression> "==" <rhs:BorExpression> => builder.eq(lhs, rhs),
    BorExpression,
};

BorExpression: ExpressionRef = {
    <lhs:BorExpression> "|" <rhs:BxorExpression> => builder.bor(lhs, rhs),
    BxorExpression,
};

BxorExpression: ExpressionRef = {
    <lhs:BxorExpression> "~" <rhs:BandExpression> => builder.bxor(lhs, rhs),
    BandExpression,
};

BandExpression: ExpressionRef = {
    <lhs:BandExpression> "&" <rhs:ShiftExpression> => builder.band(lhs, rhs),
    ShiftExpression,
};

ShiftExpression: ExpressionRef = {
    <lhs:ShiftExpression> "<<" <rhs:ConcatExpression> => builder.shl(lhs, rhs),
    <lhs:ShiftExpression> ">>" <rhs:ConcatExpression> => builder.shr(lhs, rhs),
    ConcatExpression,
};

ConcatExpression: ExpressionRef = {
    <lhs:AddSubExpression> ".." <rhs:ConcatExpression> => builder.concat(lhs, rhs),
    AddSubExpression,
};

AddSubExpression: ExpressionRef = {
    <lhs:AddSubExpression> "+" <rhs:MulDivModExpression> => builder.add(lhs, rhs),
    <lhs:AddSubExpression> "-" <rhs:MulDivModExpression> => builder.sub(lhs, rhs),
    MulDivModExpression,
};

MulDivModExpression: ExpressionRef = {
    <lhs:MulDivModExpression> "*" <rhs:UnaryExpression> => builder.mul(lhs, rhs),
    <lhs:MulDivModExpression> "/" <rhs:UnaryExpression> => builder.div(lhs, rhs),
    <lhs:MulDivModExpression> "//" <rhs:UnaryExpression> => builder.idiv(lhs, rhs),
    <lhs:MulDivModExpression> "%" <rhs:UnaryExpression> => builder.mod_(lhs, rhs),
};

UnaryExpression: ExpressionRef = {
    "not" <rhs:UnaryExpression> => builder.not(rhs),
    "#" <rhs:UnaryExpression> => builder.len(rhs),
    "~" <rhs:UnaryExpression> => builder.bnot(rhs),
    "-" <rhs:UnaryExpression> => builder.unm(rhs),
    PowExpression,
};

PowExpression: ExpressionRef = {
    <lhs:OperandExpression> "^" <rhs:PowExpression> => builder.pow(lhs, rhs),
    OperandExpression,
};

OperandExpression: ExpressionRef = {
    "nil" => builder.nil(),
    "false" => builder.false_(),
    "true" => builder.true_(),
    "..." =>? Ok(builder.ellipses()?),
    <value:Numeral> => builder.numeral(value),
    <value:String> => builder.string(value),
    PrefixExpression,
};

PrefixExpression: ExpressionRef = {
    <name:Name> =>? Ok(builder.name_expression(name)?),
    <table:PrefixExpression> "[" <key:Expression> "]" => builder.index(table, key),
    <table:PrefixExpression> "." <name:Name> => builder.member_expression(table, name),
    "(" <inner:Expression> ")" => builder.parenthesized(inner),
    FunctionCall,
};

FunctionCall: ExpressionRef = {
    <receiver:PrefixExpression> <method:Name?> <args:Args> => builder.call(receiver, method.into(), args),
};

Args: EntityList<ExpressionRef> = {
    <string:String> => builder.expression_list(EntityList::new(), builder.string(string)),
    <value:TableConstructor> => builder.expression_list(EntityList::new(), value),
    "(" <values:ExpressionList> ")" => values,
};

TableConstructor: ExpressionRef = {
    "{" <fields:(<FieldList> FieldSeparator?)?> "}" => builder.table(fields.unwrap_or(EntityList::new())),
};

FieldList: EntityList<FieldRef> = {
    <accum:FieldList> FieldSeparator <field:Field> => builder.field_list(accum, field),
    <field:Field> => builder.field_list(EntityList::new(), field),
};

Field: FieldRef = {
    "[" <key:Expression> "]" "=" <value:Expression> => builder.keyed_field(key, value),
    <name:Name> "=" <value:Expression> => builder.member_field(name, value),
    <value:Expression> => builder.ordinal_field(value),
};

FieldSeparator: () = {
    ";",
    ",",
};

extern {
    type Location = usize;

    type Error = Error;

    enum Token {
        Name => Token::Name(<StringRef>),
        String => Token::String(<StringRef>),
        Numeral => Token::Numeral(<Numeral>),
        "and" => Token::KwAnd,
        "break" => Token::KwBreak,
        "do" => Token::KwDo,
        "else" => Token::KwElse,
        "elseif" => Token::KwElseif,
        "end" => Token::KwEnd,
        "false" => Token::KwFalse,
        "for" => Token::KwFor,
        "function" => Token::KwFunction,
        "goto" => Token::KwGoto,
        "if" => Token::KwIf,
        "in" => Token::KwIn,
        "local" => Token::KwLocal,
        "nil" => Token::KwNil,
        "not" => Token::KwNot,
        "or" => Token::KwOr,
        "repeat" => Token::KwRepeat,
        "return" => Token::KwReturn,
        "then" => Token::KwThen,
        "true" => Token::KwTrue,
        "until" => Token::KwUntil,
        "while" => Token::KwWhile,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "^" => Token::Caret,
        "#" => Token::Hash,
        "&" => Token::Ampersand,
        "~" => Token::Tilde,
        "|" => Token::Pipe,
        "<<" => Token::LAngle2,
        ">>" => Token::RAngle2,
        "//" => Token::Slash2,
        "==" => Token::Equals2,
        "~=" => Token::TildeEquals,
        "<=" => Token::LAngleEquals,
        ">=" => Token::RAngleEquals,
        "<" => Token::LAngle,
        ">" => Token::RAngle,
        "=" => Token::Equals,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LCurly,
        "}" => Token::RCurly,
        "[" => Token::LSquare,
        "]" => Token::RSquare,
        "::" => Token::Colon2,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::Dot2,
        "..." => Token::Dot3,
    }
}
